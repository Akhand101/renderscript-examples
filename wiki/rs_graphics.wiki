#summary One-sentence summary of this page.

= Introduction =

API specification of rs_graphics.rsh


= Details =

*Binding Program*
|| *Function* || *Description * ||
|| rsgBindProgramFragment(rs_program_fragment pf); || Bind the program fragment. ||
|| rsgBindProgramStore(rs_program_store ps); || Bind the program store. ||
|| rsgBindProgramVertex(rs_program_vertex pv); || Bind the program vertex. ||
|| rsgBindProgramRaster(rs_program_raster pr); || Bind the program raster. ||
|| rsgBindSampler(rs_program_fragment, uint slot, rs_sampler); || Bind the program sampler. ||
|| rsgBindTexture(rs_program_fragment, uint slot, rs_allocation); || Bind the texture data. ||

<br>

*Load Matrix*
|| *Function* || *Description * ||
|| rsgProgramVertexLoadProjectionMatrix(const rs_matrix4x4 *); || Load vertex matrix as projection matrix. ||
|| rsgProgramVertexLoadModelMatrix(const rs_matrix4x4 *); || Load vertex matrix as model matrix. ||
|| rsgProgramVertexLoadTextureMatrix(const rs_matrix4x4 *); || Load vertex matrix as texure matrix. ||
|| rsgProgramVertexGetProjectionMatrix(rs_matrix4x4 *); || Get the Projection vertex matrix. ||

<br>

*Set constant color*
|| *Function* || *Description * ||
|| rsgProgramFragmentConstantColor(rs_program_fragment pf, float r, float g, float b, float a); || Set the constant color for a fixed function emulation program. ||

<br>

*Get surface size*
|| *Function* || *Description * ||
|| rsgGetWidth(void); || Get the width of the current rendering surface. ||
|| rsgGetHeight(void); || Get the height of the current rendering surface. ||

<br>

*Sync memory buffer*
|| *Function* || *Description * ||
|| rsgAllocationSyncAll(rs_allocation alloc); || Sync the contents of an allocation from its SCRIPT memory space to its HW memory spaces. ||

<br>

*Drawing/Graphics*
|| *Function* || *Description * ||
|| rsgDrawRect(float x1, float y1, float x2, float y2, float z); || Low performance utility function for drawing a simple rectangle.<br>Not intended for drawing large quantities of geometry. ||
|| rsgDrawQuad(float x1, float y1, float z1,<br>`    `float x2, float y2, float z2,<br>float x3, float y3, float z3,<br>float x4, float y4, float z4); || Low performance utility function for drawing a simple quad.<br>Not intended for drawing large quantities of geometry.||
|| rsgDrawSpriteScreenspace(float x, float y, float z, float w, float h); || Low performance function for drawing rectangles in screenspace.<br>This function uses the default passthough ProgramVertex.<br>Any bound ProgramVertex is ignored.<br>This function has considerable overhead and should not be used for drawing in shipping applications.||
|| rsgDrawMesh(rs_mesh ism);<br>rsgDrawMesh(rs_mesh ism, uint primitiveIndex);<br>rsgDrawMesh(rs_mesh ism, uint primitiveIndex, uint start, uint len); || Draw a mesh of geometry using the current context state.<br>The whole mesh is rendered. ||
|| rsgClearColor(float r, float g, float b, float a); || Clears the rendering surface to the specified color.||
|| rsgClearDepth(float value); || Clears the depth suface to the specified value. ||

<br>

*Drawing/Text*
|| *Function* || *Description * ||
|| rsgDrawText(const char `*`, int x, int y);<br>rsgDrawText(rs_allocation, int x, int y); || Draw text string. ||
|| rsgBindFont(rs_font); || Set the text font. ||
|| rsgFontColor(float r, float g, float b, float a); || Set the text color. ||
|| rsgMeasureText(const char `*`, int `*`left, int `*`right, int `*`top, int `*`bottom);<br>rsgMeasureText(rs_allocation, int `*`left, int `*`right, int `*`top, int `*`bottom); || Returns the bounding box of the text relative to (0, 0).<br>Any of left, right, top, bottom could be NULL ||

<br>

*Misc*
|| *Function* || *Description * ||
|| rsgMeshComputeBoundingBox(rs_mesh mesh, float `*`minX, float `*`minY, float `*`minZ,<br>float `*`maxX, float `*`maxY, float `*`maxZ);<br>rsgMeshComputeBoundingBox(rs_mesh mesh, float3 `*`bBoxMin, float3 `*`bBoxMax) {<br>float x1, y1, z1, x2, y2, z2;<br>rsgMeshComputeBoundingBox(mesh, &x1, &y1, &z1, &x2, &y2, &z2);<br>bBoxMin->x = x1;<br>bBoxMin->y = y1;<br>bBoxMin->z = z1;<br>bBoxMax->x = x2;<br>bBoxMax->y = y2;<br>bBoxMax->z = z2;<br>} || ||